'use server';

import { prisma } from '@/prisma/prisma-client';

import { CheckoutFormValues } from '@/shared/constants';
import { createPayment, sendEmail } from '@/shared/lib';
import { getUserSession } from '@/shared/lib/get-user-session';
import { OrderStatus, Prisma } from '@prisma/client';
import { hashSync } from 'bcrypt';
import { cookies } from 'next/headers';
import { PayOrderTemplate, VerificationUserTemplate } from '@/shared/components/shared';

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
const DELIVERY_PRICE = 1250; // –ï—Å–ª–∏ —ç—Ç–∞ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö, –ª—É—á—à–µ –≤—ã–Ω–µ—Å—Ç–∏ –µ–µ
export async function createOrder(data: CheckoutFormValues) {
   try{
    const cookieStore = await cookies();
    const cartToken = cookieStore.get('cartToken')?.value;
    if (!cartToken) {
      throw new Error('Cart token not found');
    }

    const session = await getUserSession();
    console.log('[CreateOrder] User session:', session);

    const userCart = await prisma.cart.findFirst({
      where: { token: cartToken },
      // ... (includes –¥–ª—è userCart)
       include: {
        user: true,
        items: {
          orderBy: { createdAt: 'desc' },
          include: {
            sizes: true,
            product: {
              include: {
                sizes: true,
                brand: true,
                color: true,
                type: true,
              },
            },
          },
        },
      },
    });

     if (!userCart) {
      throw new Error('Cart not found');
    }
    if (userCart?.totalAmount === 0) {
      throw new Error('Cart is empty');
    }
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –û–ë–©–£–Æ –°–£–ú–ú–£ –ó–ê–ö–ê–ó–ê, –≤–∫–ª—é—á–∞—è –¥–æ—Å—Ç–∞–≤–∫—É
    const finalTotalAmount = userCart.totalAmount + DELIVERY_PRICE;
    console.log(`[CreateOrder] Cart total: ${userCart.totalAmount}, Delivery: ${DELIVERY_PRICE}, Final total: ${finalTotalAmount}`);

    const orderData: Prisma.OrderCreateInput = {
      token: cartToken,
      fullName: data.firstName + ' ' + data.lastName,
      email: data.email,
      phone: data.phone,
      address: data.address,
      comment: data.comment,
      totalAmount: finalTotalAmount,
      status: OrderStatus.PENDING,
      items: JSON.stringify(userCart.items),
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, —Å–≤—è–∑—ã–≤–∞–µ–º –∑–∞–∫–∞–∑ —Å –Ω–∏–º
      ...(session?.id && { // –ò—Å–ø–æ–ª—å–∑—É–µ–º spread operator –¥–ª—è —É—Å–ª–æ–≤–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤–∞
        user: {
          connect: {
            id: Number(session.id),
          },
        },
      }),
    };
    console.log('[CreateOrder] Order data to be created:', JSON.stringify(orderData, null, 2));



    const order = await prisma.order.create({
      data: orderData,
    });
    console.log('[CreateOrder] Order created with ID:', order.id, 'and userId:', order.userId); // –õ–æ–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    /* –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É */
    await prisma.cart.update({
      where: {
        id: userCart.id,
      },
      data: {
        totalAmount: 0,
      },
    });

    await prisma.cartItem.deleteMany({
      where: {
        cartId: userCart.id,
      },
    });

    const paymentData = await createPayment({
      amount: order.totalAmount,
      orderId: order.id,
      description: '–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ #' + order.id,
    });

    if (!paymentData) {
      throw new Error('Payment data not found');
    }

    await prisma.order.update({
      where: {
        id: order.id,
      },
      data: {
        paymentId: paymentData.id,
      },
    });

    const paymentUrl = paymentData.confirmation.confirmation_url;

    await sendEmail(
      data.email,
      'OVERSIZE / –û–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–∫–∞–∑ #' + order.id,
      PayOrderTemplate(
        {
        orderId: order.id,
        totalAmount: order.totalAmount,
        paymentUrl,
        }
    ),
    );

    return paymentUrl;
  } catch (err) {
      console.error('[CreateOrder] Server error', err); // –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ console.error –¥–ª—è –ª—É—á—à–µ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    // –ú–æ–∂–Ω–æ –≤—ã–±—Ä–æ—Å–∏—Ç—å –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
    // throw err;
    // –ò–ª–∏ –≤–µ—Ä–Ω—É—Ç—å null/undefined/—Å–ø–µ—Ü–æ–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏
    return null;
  }
}

export async function updateUserInfo(body: Prisma.UserUpdateInput) {
  try {
    const currentUser = await getUserSession();

    if (!currentUser) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω');
    }

    const findUser = await prisma.user.findFirst({
      where: {
        id: Number(currentUser.id),
      },
    });

    await prisma.user.update({
      where: {
        id: Number(currentUser.id),
      },
      data: {
        fullName: body.fullName,
        email: body.email,
        password: body.password ? hashSync(body.password as string, 10) : findUser?.password,
      },
    });
  } catch (err) {
    console.log('Error [UPDATE_USER]', err);
    throw err;
  }
}

export async function registerUser(body: Prisma.UserCreateInput) {
  try {
    const user = await prisma.user.findFirst({
      where: {
        email: body.email,
      },
    });

    if (user) {
      if (!user.verified) {
        throw new Error('–ü–æ—á—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞');
      }

      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }

    const createdUser = await prisma.user.create({
      data: {
        fullName: body.fullName,
        email: body.email,
        password: hashSync(body.password, 10),
      },
    });

    const code = Math.floor(100000 + Math.random() * 900000).toString();

    await prisma.verificationCode.create({
      data: {
        code,
        userId: createdUser.id,
      },
    });

    await sendEmail(
      createdUser.email,
      'OVERSIZE / üìù –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
      VerificationUserTemplate({
        code,
      }),
    );
  } catch (err) {
    console.log('Error [CREATE_USER]', err);
    throw err;
  }
}
export interface OrderStoredItem {
  id: number; // ID —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–æ—Ä–∑–∏–Ω—ã (CartItem)
  name: string; // –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ CartItem.product.name
  imageUrl: string; // URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ CartItem.product.imageUrl
  price: number; // –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ CartItem.product.price
  quantity: number;
  sizes: { name: string }[]; // –ü—Ä–∏–º–µ—Ä: [{ name: 'M' }, { name: 'L' }]
  // productId: number; // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å ID —Å–∞–º–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –¥–ª—è –∑–∞–∫–∞–∑–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
// Order –∏–∑ @prisma/client –ø–ª—é—Å —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ items
export type OrderWithParsedItems = Omit<Prisma.OrderGetPayload<{
  include: { user: true } // –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ user –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω
}>, 'items'> & {
  items: OrderStoredItem[];
};
interface ItemSize { // <--- –î–û–ë–ê–í–¨–¢–ï –≠–¢–û–¢ –ò–ù–¢–ï–†–§–ï–ô–°
  name: string;
  // –¥–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –ø–æ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è, –Ω–∞–ø—Ä–∏–º–µ—Ä id
  // id?: number;
}
export async function getUserOrders(): Promise<OrderWithParsedItems[]> {
  try {
    const currentUser = await getUserSession();
 console.log('actions.ts => getUserOrders: currentUser:', currentUser); // <--- –û–¢–õ–ê–î–ö–ê

    if (!currentUser?.id) {
      console.error('actions.ts => getUserOrders: User not authenticated or ID missing');
      return [];
    }
console.log('actions.ts => getUserOrders: Fetching orders for userId:', Number(currentUser.id)); // <--- –û–¢–õ–ê–î–ö–ê
    const ordersFromDb = await prisma.order.findMany({ // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
      where: {
        userId: Number(currentUser.id),
      },
      orderBy: {
        createdAt: 'desc',
      },
      include: { // << --- –í–û–¢ –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í–ö–õ–Æ–ß–ê–ï–ú –î–ê–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
        user: true,
      }
    });
 console.log('actions.ts => getUserOrders: ordersFromDb (raw from DB):', JSON.stringify(ordersFromDb, null, 2)); // <--- –û–¢–õ–ê–î–ö–ê (–∏—Å–ø–æ–ª—å–∑—É–µ–º JSON.stringify –¥–ª—è –ª—É—á—à–µ–≥–æ –≤—ã–≤–æ–¥–∞)

    if (!ordersFromDb || ordersFromDb.length === 0) {
      console.log('actions.ts => getUserOrders: No orders found in DB for this user.');
      return []; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    }
    // –¢–µ–ø–µ—Ä—å ordersFromDb –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–µ user –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞
     const ordersWithParsedItems: OrderWithParsedItems[] = ordersFromDb.map(order => {
      let parsedItems: OrderStoredItem[] = [];
      try {
        if (typeof order.items === 'string') {
          const itemsData = JSON.parse(order.items);
          if (Array.isArray(itemsData)) {
            parsedItems = itemsData.map(item => ({ // <--- –ó–¥–µ—Å—å `item` —ç—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –∏–∑ JSON –ø–æ–ª—è Order.items
              id: item.id,
              name: item.product.name,
              imageUrl: item.product.imageUrl,
              price: item.product.price,
              quantity: item.quantity,
              // –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø –¥–ª—è s
              sizes: item.sizes.map((s: ItemSize) => ({ name: s.name })), // <--- –ò–ó–ú–ï–ù–ï–ù–ò–ï: s: ItemSize
              // productId: item.product.id,
            }));
          } else {
            console.warn(`Order.items for order ${order.id} is not an array after parsing:`, itemsData);
          }
        } else if (order.items !== null) {
            console.warn(`Order.items for order ${order.id} is not a string:`, order.items);
        }
      } catch (e) {
         console.error(`actions.ts => getUserOrders: Failed to parse items for order ${order.id}:`, e);
          }
      return {
        ...order, // –¢–µ–ø–µ—Ä—å order —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–µ user, –∏ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –±—É–¥–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º
        items: parsedItems,
      };
    });

    console.log('actions.ts => getUserOrders: ordersWithParsedItems (after parsing):', JSON.stringify(ordersWithParsedItems, null, 2)); // <--- –û–¢–õ–ê–î–ö–ê
    return ordersWithParsedItems;
  } catch (error) {
    console.error('actions.ts => getUserOrders: General error:', error);
    return [];
  }
}